
1.Test failed with exception: Segmentation fault(11)

  一般是访问越界或者溢出了；

   可以用GDB调试

   gcc -g test_case_2.c -l cmocka 没指定生成的文件，默认是a.out（gcc -g test.c -o test -l cmocka生成的是test）,然后gdb test即可.
  
   gdb a.out 

   run
 
   问题出现了：Program received signal SIGSEGV, Segmentation fault.  

              在分配内存时无法确定指针指向的位置，当再次访问的时候，就会出现这个问题。
              
              有时候应该是指针，而使用了其他非指针变量也会出现这种问题。

   quit或者CTRL+D退出gdb调试；


2.[  ERROR   ] --- __wrap_chef_cook() has remaining non-returned values.
   test2.c:64: note: remaining item was declared here

  在64行调用了__wrap_chef_cook()函数，但是在test函数中没有调用到__wrap_chef_cook()函数，导致该函数没有返回值；
  

3.munmap_chunk(): invalid pointer......Aborted (core dumped)
 
   这是由于free时出现的问题,对野指针进行了操作

4.在标准c语言中：

  assert(0)： Assertion `0' failed.
              Aborted (core dumped)

  其值为假（0），那么它先向stderr打印一条出错信息,然后通过调用 abort 来终止程序运行。


6. Test failed with exception: Floating point exception(8)

   浮点异常，比如除数位0的情况；


/*********************************************************************

   事件先指定未来会出现什么事件，然后在未来某个时间点触发事件。

  可以看做是如下的过程：

  指定参数事件
  指定返回值事件
  rc func(para) 
  {
    触发参数事件
    return 触发返回值事件
  }

     expect_check(#func, #para, #check_func, const void* check_data)
     指定某个para将会触发调用check_func函数的事件，该函数的两个参数分别为para和check_data，若检查通过，则返回0。 

*********************************/
    
7.把ls命令的运行结果保存到文件ls.txt中(重定向)
  $ ls > ls.txt   
  $ ls-->ls.txt 







  


